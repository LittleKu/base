import("base.gni")

config("common_config") {
  cflags = []
  cflags_c = []
  cflags_cc = []
  cflags_objc = []
  defines = []

  if (is_clang) {
    cflags += [ "-Wno-shadow" ]
  }

  if (is_posix || is_fuchsia) {
    cflags_c += [
      # Some of these flags should also be added to cflags_objc.

      # "-Wextra",  (used when building C++ but not when building C)
      # "-Wmissing-prototypes",  (C/Obj-C only)
      # "-Wmissing-declarations",  (ensure this is always used C/C++, etc..)
      "-Wstrict-prototypes",

      # "-Wpointer-arith",  (ensure this is always used C/C++, etc..)
      # "-Wbad-function-cast",  (C/Obj-C only)
      # "-Wnested-externs",  (C/Obj-C only)
    ]
    cflags_objc += [ "-Wstrict-prototypes" ]
    cflags_cc = [
      "-Wnon-virtual-dtor",

      # This is enabled for clang; enable for gcc as well.
      "-Woverloaded-virtual",
    ]
  }

  if (is_clang) {
    cflags += [ "-Wc++11-narrowing" ]

    if (!is_fuchsia) {
      # Compiling with the Fuchsia SDK results in Wundef errors
      # TODO(bugs.fuchsia.dev/100722): Remove from (!is_fuchsia) branch when
      # Fuchsia build errors are fixed.
      cflags += [ "-Wundef" ]
    }

    if (!is_nacl) {
      # Flags NaCl (Clang 3.7) do not recognize.
      cflags += [ "-Wunused-lambda-capture" ]
    }
  }

  if (is_win && !is_clang) {
    # MSVC warning suppressions (needed to use Abseil).
    # external headers warning suppression (or fix them upstream).
    cflags += [ "/wd4702" ]  # unreachable code

    # MSVC 2019 warning suppressions for C++17 compiling
    cflags += [ "/wd5041" ]  # out-of-line definition for constexpr static data
                             # member is not needed and is deprecated in C++17
  }

  if (current_cpu == "mipsel") {
    defines += [ "MIPS32_LE" ]
    if (mips_float_abi == "hard") {
      defines += [ "MIPS_FPU_LE" ]
    }
    if (mips_arch_variant == "r2") {
      defines += [ "MIPS32_R2_LE" ]
    }
    if (mips_dsp_rev == 1) {
      defines += [ "MIPS_DSP_R1_LE" ]
    } else if (mips_dsp_rev == 2) {
      defines += [
        "MIPS_DSP_R1_LE",
        "MIPS_DSP_R2_LE",
      ]
    }
  }

  if (is_android && !is_clang) {
    # The Android NDK doesn"t provide optimized versions of these
    # functions. Ensure they are disabled for all compilers.
    cflags += [
      "-fno-builtin-cos",
      "-fno-builtin-sin",
      "-fno-builtin-cosf",
      "-fno-builtin-sinf",
    ]
  }

  if (!build_with_chromium && base_win_undef_unicode) {
    cflags += [
      "/UUNICODE",
      "/U_UNICODE",
    ]
  }
}

config("absl_flags_configs") {
  defines = [ "ABSL_FLAGS_STRIP_NAMES=0" ]
}

group("default") {
  deps = [ "//examples:example" ]
}
